/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
import { timerFlush } from "d3-timer";
import range from "lodash-es/range";
import includes from "lodash-es/includes";
function each(element, fn) {
    if (element instanceof Element) {
        fn(0, element);
    }
    else {
        element.each(fn);
    }
}
export function getUuid() {
    const array = new Uint16Array(1);
    const uuid = window.crypto.getRandomValues(array);
    return uuid;
}
export function testDom(height, width) {
    const element = document.createElement("div"), heightWithUnits = isFinite(Number(height)) ? `${Number(height)}px` : String(height), widthWithUnits = isFinite(Number(width)) ? `${Number(width)}px` : String(width), id = "item_" + getUuid();
    element.id = id;
    element.style.height = heightWithUnits;
    element.style.width = widthWithUnits;
    element.style.position = "relative";
    element.className = "visual";
    document.body.appendChild(element);
    return document.getElementById(id);
}
export var ClickEventType;
(function (ClickEventType) {
    ClickEventType[ClickEventType["Default"] = 0] = "Default";
    ClickEventType[ClickEventType["CtrlKey"] = 1] = "CtrlKey";
    ClickEventType[ClickEventType["AltKey"] = 2] = "AltKey";
    ClickEventType[ClickEventType["ShiftKey"] = 4] = "ShiftKey";
    ClickEventType[ClickEventType["MetaKey"] = 8] = "MetaKey";
})(ClickEventType || (ClickEventType = {}));
export var MouseEventType;
(function (MouseEventType) {
    MouseEventType[MouseEventType["click"] = 0] = "click";
    MouseEventType[MouseEventType["mousedown"] = 1] = "mousedown";
    MouseEventType[MouseEventType["mouseup"] = 2] = "mouseup";
    MouseEventType[MouseEventType["mouseover"] = 3] = "mouseover";
    MouseEventType[MouseEventType["mousemove"] = 4] = "mousemove";
    MouseEventType[MouseEventType["mouseout"] = 5] = "mouseout";
})(MouseEventType || (MouseEventType = {}));
export var PointerEventType;
(function (PointerEventType) {
    PointerEventType["pointerover"] = "pointerover";
    PointerEventType["pointerenter"] = "pointerenter";
    PointerEventType["pointerdown"] = "pointerdown";
    PointerEventType["pointermove"] = "pointermove";
    PointerEventType["pointerup"] = "pointerup";
    PointerEventType["pointercancel"] = "pointercancel";
    PointerEventType["pointerout"] = "pointerout";
    PointerEventType["pointerleave"] = "pointerleave";
    PointerEventType["gotpointercapture"] = "gotpointercapture";
    PointerEventType["lostpointercapture"] = "lostpointercapture";
})(PointerEventType || (PointerEventType = {}));
export var PointerType;
(function (PointerType) {
    PointerType["mouse"] = "mouse";
    PointerType["pen"] = "pen";
    PointerType["touch"] = "touch";
})(PointerType || (PointerType = {}));
export function d3Click(element, x, y, eventType, button) {
    mouseEvent.call(element, MouseEventType.click, x, y, eventType, button);
}
export function d3MouseDown(element, x, y, eventType, button) {
    mouseEvent.call(element, MouseEventType.mousedown, x, y, eventType, button);
}
export function d3MouseUp(element, x, y, eventType, button) {
    mouseEvent.call(element, MouseEventType.mouseup, x, y, eventType);
}
export function d3MouseOver(element, x, y, eventType, button) {
    mouseEvent.call(element, MouseEventType.mouseover, x, y, eventType, button);
}
export function d3MouseMove(element, x, y, eventType, button) {
    mouseEvent.call(element, MouseEventType.mousemove, x, y, eventType, button);
}
export function d3MouseOut(element, x, y, eventType, button) {
    mouseEvent.call(element, MouseEventType.mouseout, x, y, eventType, button);
}
export function d3KeyEvent(element, typeArg, keyArg, keyCode) {
    keyEvent.call(element, typeArg, keyArg, keyCode);
}
export function d3TouchStart(element, touchList) {
    each(this, function (i, e) {
        const evt = createTouchStartEvent(touchList);
        e.dispatchEvent(evt);
    });
}
export function d3TouchMove(element, touchList) {
    each(this, function (i, e) {
        const evt = createTouchMoveEvent(touchList);
        e.dispatchEvent(evt);
    });
}
export function d3TouchEnd(element, touchList) {
    each(this, function (i, e) {
        const evt = createTouchEndEvent(touchList);
        e.dispatchEvent(evt);
    });
}
export function pointerEvent(element, pointerEventType, pointerType, x, y) {
    each(this, function (i, e) {
        const evt = createPointerEvent(pointerEventType, pointerType, x, y);
        e.dispatchEvent(evt);
    });
}
export function d3ContextMenu(element, x, y) {
    each(this, function (i, e) {
        const evt = createContextMenuEvent(x, y);
        e.dispatchEvent(evt);
    });
}
// Defining a simulated click event (see http://stackoverflow.com/questions/9063383/how-to-invoke-click-event-programmaticaly-in-d3)
function mouseEvent(mouseEventType, x, y, eventType, button) {
    const clickEventType = eventType || ClickEventType.Default;
    each(this, function (i, e) {
        const evt = createMouseEvent(mouseEventType, clickEventType, x, y, button);
        e.dispatchEvent(evt);
    });
}
function keyEvent(typeArg, keyArg, keyCode) {
    each(this, function (i, e) {
        const evt = new KeyboardEvent(typeArg, {
            key: keyArg,
            bubbles: true,
            cancelable: true,
            location: KeyboardEvent.DOM_KEY_LOCATION_STANDARD,
            repeat: false,
            view: window,
        });
        e.dispatchEvent(evt);
    });
}
/**
 * Creates mouse event
 * @param eventType {ClickEventType}.
 * @param x clientX.
 * @param y clientY.
 * @param eventName {string} Event name e.g click, mousedown ...
 */
export function createMouseEvent(mouseEventType, eventType, x, y, button = 0) {
    const clickEventType = eventType || ClickEventType.Default, evt = document.createEvent("MouseEvents");
    evt.initMouseEvent(MouseEventType[mouseEventType], // type
    true, // canBubble
    true, // cancelable
    window, // view
    0, // detail
    x, // screenX
    y, // screenY
    x, // clientX
    y, // clientY
    !!(clickEventType & ClickEventType.CtrlKey), // ctrlKey
    !!(clickEventType & ClickEventType.AltKey), // altKey
    !!(clickEventType & ClickEventType.ShiftKey), // shiftKey
    !!(clickEventType & ClickEventType.MetaKey), // metaKey
    button, // button
    null); // relatedTarget
    return evt;
}
export function createTouchStartEvent(touchList) {
    // NOTE: phantomjs does not support TouchEvent
    const evt = document.createEvent("UIEvent");
    evt.initEvent("touchstart", true, true);
    if (touchList) {
        evt.touches = touchList;
    }
    return evt;
}
export function createTouchMoveEvent(touchList) {
    // NOTE: phantomjs does not support TouchEvent
    const evt = document.createEvent("UIEvent");
    evt.initEvent("touchmove", true, true);
    if (touchList) {
        evt.touches = touchList;
    }
    return evt;
}
export function createTouchEndEvent(touchList) {
    // NOTE: phantomjs does not support TouchEvent
    const evt = document.createEvent("UIEvent");
    evt.initEvent("touchend", true, true);
    if (touchList) {
        evt.touches = touchList;
    }
    return evt;
}
export function createPointerEvent(pointerEventType, pointerType, x, y) {
    const evt = new PointerEvent(pointerEventType, {
        pointerId: 1,
        bubbles: true,
        cancelable: true,
        pointerType: pointerType,
        width: 1,
        height: 1,
        isPrimary: true,
        clientX: x,
        clientY: y
    });
    return evt;
}
export function createContextMenuEvent(x, y) {
    const evt = document.createEvent("MouseEvents");
    evt.initMouseEvent("contextmenu", // type
    true, // canBubble
    true, // cancelable
    window, // view
    0, // detail
    x, // screenX
    y, // screenY
    x, // clientX
    y, // clientY
    false, // ctrlKey
    false, // altKey
    false, // shiftKey
    false, // metaKey
    0, // button
    null); // relatedTarget
    return evt;
}
export function createTouchesList(touches) {
    const touchesList = touches;
    touches.item = (index) => {
        return this.arr[index];
    };
    return touchesList;
}
export function createTouch(x, y, element, id = 0) {
    const newElement = Object.prototype.hasOwnProperty.call(element, "get") ? element.get(0) : element;
    return {
        pageX: x,
        pageY: y,
        screenX: x,
        screenY: y,
        clientX: x,
        clientY: y,
        target: newElement,
        identifier: id,
        force: 1,
        radiusX: 1,
        radiusY: 1,
        rotationAngle: 0,
    };
}
export function clickElement(element, ctrlKey = false) {
    const newElement = Object.prototype.hasOwnProperty.call(element, "get") ? element.get(0) : element;
    const rect = newElement.getBoundingClientRect(), coordinatesTop = rect.top + document.body.scrollTop, coordinatesLeft = rect.left + document.body.scrollLeft, width = newElement.offsetWidth, height = newElement.offsetHeight, eventType = ctrlKey
        ? ClickEventType.CtrlKey
        : ClickEventType.Default;
    d3Click(element, coordinatesLeft + (width / 2), coordinatesTop + (height / 2), eventType);
}
/**
 * Forces all D3 transitions to complete.
 * Normally, zero-delay transitions are executed after an instantaneous delay (<10ms).
 * This can cause a brief flicker if the browser renders the page twice: once at the end of the first event loop,
 * then again immediately on the first timer callback. By flushing the timer queue at the end of the first event loop,
 * you can run any zero-delay transitions immediately and avoid the flicker.
 *
 * These flickers are noticable on IE, and with a large number of webviews(not recommend you ever do this) on iOS.
 */
export function flushAllD3Transitions() {
    const now = Date.now;
    Date.now = function () { return Infinity; };
    // timer.flush();
    timerFlush();
    Date.now = now;
}
export function getRandomNumbers(count, min = 0, max = 1) {
    return range(count).map(x => getRandomNumber(min, max));
}
export function getRandomNumber(min, max, exceptionList, changeResult = x => x) {
    const cryptoObj = window.crypto || window.msCrypto;
    const randomValue = +("0." + cryptoObj.getRandomValues(new Uint8Array(1)));
    const result = changeResult(randomValue * (max - min) + min);
    if (exceptionList && exceptionList.length && includes(exceptionList, result)) {
        return getRandomNumber(min, max, exceptionList);
    }
    return result;
}
//# sourceMappingURL=helpers.js.map